package arrayLessons;

import java.util.Arrays;

public class ArrayBinarySearch {
    public static int[] array = {9, 8, 7, 6, 5, 4, 3, 2, 1};
    public static int element = 5;
    public static void main(String[] args) {
        int [] array2 = Arrays.copyOf(array,array.length);
        Arrays.sort(array2);
        System.out.println(Arrays.binarySearch(array2,element));
        boolean b = Arrays.binarySearch(array2,element)>=0;
        System.out.println(b);
        System.out.println((Arrays.binarySearch(array2, element)) >= 0);
        System.out.println((Arrays.binarySearch(array2, element)) >= 0);
    }

//        5. Метод Arrays.binarySearch()
//        Ну и последний из самых интересных методов класса Arrays умеет искать заданное значение в массиве. Это не обычный поиск, а так называемый бинарный поиск. Суть его заключается вот в чем:
//
//        Предварительно массив сортируется
//        Затем средний элемент массива сравнивается с искомым (с тем, который мы ищем).
//                Если искомый больше среднего, поиск продолжается в правой половине массива.
//                Если искомый элемент меньше среднего, поиск продолжается в левой половине массива
//        Благодаря тому, что массив отсортирован, можно за одно сравнение отбросить половину массива. Затем на следующем шаге отбросить еще половину и т.д.
//
//                Такой подход делает бинарный поиск очень быстрым. В массиве из миллиона(!) элементов он может найти индекс нужного элемента всего за 20 сравнений. Минусом такого подхода является то, что массив предварительно нужно отсортировать, а сортировка тоже занимает время.
//
//        Вот как выглядит его вызов:
//
//        int index = Arrays.binarySearch(имя, значение);
//        Где имя — это имя массива, который нужно передать уже отсортированным (например, с помощью функции Arrays.sort()). значение — это тот элемент, который ищется в массиве. Метод возвращает результат — индекс искомого элемента в массиве (номер ячейки массива).
//
//                Примеры:
//
//        int[] x = {11, -2, 3, 0, 999, -20, 8, -20, 99, -20};
//        Arrays.sort(x);
//
//        int index1 = Arrays.binarySearch(x, 0);
//        int index2 = Arrays.binarySearch(x, -20);
//        int index3 = Arrays.binarySearch(x, 99);
//        int index4 = Arrays.binarySearch(x, 5);
//        x содержит:
//        {-20, -20, -20, -2, 0, 3, 8, 11, 99, 999}
//
//        4
//        1 (также подходили индексы 0 и 2)
//        8
//                -7
//        Если искомых элементов в массиве несколько, просто вернется номер одного из них (нет гарантий, что это будет, допустим, самый первый или наоборот — самый последний из одинаковых элементов).
//
//                Если элемент в массиве не найден, индекс будет отрицательным.
}

