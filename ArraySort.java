import java.util.Arrays;

public class ArraySort {
    public static int[] array = {9, 8, 7, 6, 5, 4, 3, 2, 1};

    public static void main(String[] args) {
        Arrays.sort(array);
            System.out.println(Arrays.toString(array));

//        4. Метод Arrays.sort()
//        Ну и самое вкусное — сортировка. В программировании сортировать массивы приходится очень часто. Три самых частых действия при работе с массивами:
//
//        Сортировка массива
//        Поиск минимального (или максимального) элемента массива
//        Определение индекса элемента в массиве (поиск элемента в массиве)
//        И именно поэтому разработчики Java включили в класс Arrays метод sort(). Вот как выглядит его вызов:
//
//        Arrays.sort(имя);
//        Этот метод сортирует переданный массив по возрастанию.
//
//                Пример:
//
//        int[] x = {11, -2, 3, 0, 999, -20, 8, -20, 99, -20};
//
//        Arrays.sort(x);
//
//        String str = Arrays.toString(x);
//
//
//
//        Переменная str содержит значение:
//        "[-20, -20, -20, -2, 0, 3, 8, 11, 99, 999]"
//        Отлично, да? Вызвал один метод, и вот у вас еще отсортированный массив. Красота.
//
//                Кстати, сортировать можно не только весь массив, но и часть массива. Вот как выглядит его вызов:
//
//        Arrays.sort(имя, первый, последний);
//        Где первый и последний — это номера первой и последней ячеек, которых должна коснуться сортировка.
//
//                По старой доброй традиции Java, последний элемент не входит в диапазон.
//                Пример:
//
//        int[] x = {11, -2, 3, 0, 999, -20, 8, -20, 99, -20};
//
//        Arrays.sort(x, 4, 8);
//        String str = Arrays.toString(x);
//
//
//        Переменная str содержит значение:
//        "[11, -2, 3, 0, -20, -20, 8, 999, 99, -20]"
//        В Java для сортировки массивов используется самый быстрый алгоритм сортировки — QuickSort. Скорость его сортировки зависит от размера массива и рассчитывается по формуле N*Log(N).
//
//                Сортировка массива из 1000 элементов будет содержать около 3_000 сравнений ячеек массива. Сортировка массива из миллиона элементов будет содержать около 6 миллионов сравнений.
    }
}
